from flask import Flask, render_template, request, jsonify
import logging
from logging.handlers import RotatingFileHandler
import os
from datetime import datetime
import sqlite3 # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sqlite3
import re # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º re –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
import requests
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask ---
app = Flask(__name__)

DATABASE = os.getenv('DATABASE_PATH', 'database.db') # 'database.db' - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ---
if not BOT_TOKEN:
    app.logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É, –Ω–æ –ª—É—á—à–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    # raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not ADMIN_ID:
    app.logger.critical("ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    # raise ValueError("ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
else:
    try:
        ADMIN_ID = int(ADMIN_ID) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ADMIN_ID –≤ int
    except ValueError:
        app.logger.critical(f"ADMIN_ID '{ADMIN_ID}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º!")
        # raise ValueError(f"ADMIN_ID '{ADMIN_ID}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º!")


def get_db():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∏–∑ os.getenv
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã) ---
def init_db():
    try:
        conn = get_db()
        cursor = conn.cursor()
        print("Checking and updating callbacks table...")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü processed, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            cursor.execute("ALTER TABLE callbacks ADD COLUMN processed INTEGER DEFAULT 0")
            print("Column 'processed' added to callbacks table.")
        except sqlite3.OperationalError:
            # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            print("Column 'processed' likely already exists.")

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS callbacks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT,
                phone TEXT NOT NULL,
                lesson_type TEXT NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                processed INTEGER DEFAULT 0 /* 0 = –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, 1 = –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ */
            )
        ''')
        conn.commit()
        print("Table checked/updated.")
        conn.close()
    except sqlite3.Error as e:
        print(f"Database error during init: {e}")
        app.logger.error(f"Database error during init: {e}")


# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram ---
def send_telegram_notification(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML' # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    try:
        response = requests.post(url, json=payload, timeout=5) # –°—Ç–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        app.logger.info(f"Telegram notification sent to {chat_id}. Response: {response.json()}")
        return True
    except requests.exceptions.RequestException as e:
        app.logger.error(f"Failed to send Telegram notification to {chat_id}: {e}")
        return False
    except Exception as e:
        app.logger.error(f"An unexpected error occurred sending Telegram notification: {e}")
        return False


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
log_dir = 'logs'
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

log_file = os.path.join(log_dir, 'app.log')

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
log_level = logging.INFO

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞
log_formatter = logging.Formatter(
    '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
)

pricing_data = {
    "individual_online": {
        "title": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ", # –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-—É—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ Zoom, MTS-link, –í–µ–±–∏–Ω–∞—Ä, WhatsApp –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫.",
        "price": "3500", # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        "old_price": "5000", # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–¥–ª—è –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        "unit": "—Ä—É–±./—á–∞—Å" # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    },
    "group_online": {
        "title": "–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ", # –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        "description": "–î–∏–Ω–∞–º–∏—á–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è –≤ –Ω–µ–±–æ–ª—å—à–æ–π –≥—Ä—É–ø–ø–µ (–¥–æ 6 —á–µ–ª–æ–≤–µ–∫). –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –æ–±—â–µ–Ω–∏–µ.",
        "price": "2500", # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        "old_price": "3500", # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
        "unit": "—Ä—É–±./—á–∞—Å" # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
# maxBytes - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –ø–µ—Ä–µ–¥ —Ä–æ—Ç–∞—Ü–∏–µ–π
# backupCount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–∞
file_handler = RotatingFileHandler(
    log_file, maxBytes=1024*1024*5, backupCount=5, encoding='utf-8' # 5 MB
)
file_handler.setFormatter(log_formatter)
file_handler.setLevel(log_level)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)
console_handler.setLevel(log_level) # –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å DEBUG –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É Flask
app.logger.addHandler(file_handler)
app.logger.addHandler(console_handler) # –£–±—Ä–∞—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
app.logger.setLevel(log_level)

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Flask, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
app.logger.removeHandler(app.logger.handlers[0])

app.logger.info('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ English School –∑–∞–ø—É—â–µ–Ω–æ')

# --- –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö (–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏) ---
# –õ—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –±—É–¥—É—â–µ–º

# --- –ú–∞—Ä—à—Ä—É—Ç—ã (Routes) ---
@app.route('/submit_callback', methods=['POST'])
def submit_callback():
    app.logger.info(f'–ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /submit_callback —Å IP: {request.remote_addr}')
    required_fields = ['name', 'full_phone', 'lesson_type', 'consent']
    missing_fields = [field for field in required_fields if field not in request.form or not request.form[field]]

    if missing_fields:
        error_message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
        app.logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {error_message}")
        return jsonify({"success": False, "error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ."}), 400

    name = request.form['name'].strip()
    phone = request.form['full_phone'].strip()
    lesson_type = request.form['lesson_type'].strip()
    email = request.form.get('email', '').strip()
    consent = request.form['consent']

    if len(name) < 1: return jsonify({"success": False, "error": "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ."}), 400
    if not re.match(r"^\+\d{10,}$", phone): return jsonify({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞."}), 400
    if email and not re.match(r"[^@]+@[^@]+\.[^@]+", email): return jsonify({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email."}), 400
    if consent != 'on': return jsonify({"success": False, "error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö."}), 400

    try:
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO callbacks (name, email, phone, lesson_type) VALUES (?, ?, ?, ?)",
            (name, email if email else None, phone, lesson_type)
        )
        new_callback_id = cursor.lastrowid # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        conn.commit()
        conn.close()
        app.logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (ID: {new_callback_id}): –ò–º—è={name}, –¢–µ–ª–µ—Ñ–æ–Ω={phone}, –¢–∏–ø={lesson_type}, Email={email}")

        # ===>>> –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM <<<===
        notification_text = (
            f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫!</b>\n\n"
            f"<b>ID:</b> {new_callback_id}\n"
            f"<b>–ò–º—è:</b> {name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"<b>Email:</b> {email if email else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è:</b> {lesson_type}\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /callbacks"
        )
        send_telegram_notification(ADMIN_ID, notification_text)
        # ===>>> –ö–û–ù–ï–¶ –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø <<<===

        return jsonify({"success": True, "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"})

    except sqlite3.Error as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
        return jsonify({"success": False, "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    app.logger.info(f'–ó–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å IP: {request.remote_addr}')
    current_year = datetime.now().year
    return render_template('index.html', current_year=current_year)

@app.route('/pricing')
def pricing():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏"""
    app.logger.info(f'–ó–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ü–µ–Ω —Å IP: {request.remote_addr}')
    current_year = datetime.now().year
    return render_template('pricing.html', prices=pricing_data, current_year=current_year)

@app.route('/about')
def about():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ '–û –Ω–∞—Å'"""
    app.logger.info(f'–ó–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–û –Ω–∞—Å" —Å IP: {request.remote_addr}')
    current_year = datetime.now().year
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä., —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î)
    # team_data = [...]
    return render_template('about.html', current_year=current_year) #, team=team_data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ 404 (–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
@app.errorhandler(404)
def page_not_found(error):
    app.logger.warning(f'–û—à–∏–±–∫–∞ 404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {request.url} (IP: {request.remote_addr})')
    current_year = datetime.now().year
    return render_template('404.html', current_year=current_year), 404 # –í–∞–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å 404

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ 500
@app.errorhandler(Exception)
def handle_exception(e):
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    app.logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500): {e}', exc_info=True)
    current_year = datetime.now().year
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
    return render_template('500.html', current_year=current_year), 500

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    if not BOT_TOKEN or not ADMIN_ID: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    else:
        init_db()
        app.run(debug=True, host='0.0.0.0', port=5000)